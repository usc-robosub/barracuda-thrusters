name: Docker Publish - barracuda-thruster-output-controller

on:
  schedule:
    - cron: "25 1 * * *" # Schedule the workflow to run daily at 1:25 AM UTC
  push:
    branches: ["main"] # Trigger on pushes to the main branch
    tags: ["v*.*.*"] # Trigger on new tags following a vX.Y.Z format
  pull_request:
    branches: ["main"] # Trigger on pull requests to the main branch

env:
  REGISTRY: ghcr.io # Define the container registry (GitHub Container Registry)
  IMAGE_NAME: ${{ github.repository }} # Automatically sets the image name to the GitHub repository name

jobs:
  build: # Renamed job from 'build-and-publish' to 'build' for consistency with template
    runs-on: ubuntu-latest # Run the job on the latest Ubuntu runner
    permissions:
      contents: read # Allow reading repository contents
      packages: write # Allow writing (pushing) Docker packages to GHCR
      id-token: write # Required for OIDC authentication with Cosign (added)

    steps:
      - name: Checkout repository # Checkout the repository code (updated to v4)
        uses: actions/checkout@v4
        with:
          submodules: true # Ensure submodules are checked out (updated to true)

      - name: Update submodules # Initialize and update Git submodules (added)
        run: |
          git submodule init
          git submodule update --remote

      # QEMU enables building non-native architectures (arm64) on x86 runners
      - name: Set up QEMU # Set up QEMU for multi-architecture builds (added)
        uses: docker/setup-qemu-action@v3

      - name: Install cosign # Install Cosign for signing container images (added)
        if: github.event_name != 'pull_request' # Only install if not a pull request
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: "v2.2.4" # Specify Cosign release version

      - name: Set up Docker Buildx # Set up Docker Buildx for advanced Docker builds
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }} # Log into the specified container registry
        if: github.event_name != 'pull_request' # Only log in if not a pull request (added condition)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }} # Use the defined registry
          username: ${{ github.actor }} # Use the GitHub actor as username
          password: ${{ secrets.GITHUB_TOKEN }} # Use the GitHub token for authentication

      - name: Extract Docker metadata # Extract Docker metadata (tags, labels) from Git events (added)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} # Define the image name for metadata extraction

      - name: Build and push arm64 image (Jetson Orin) # Build and push the Docker image for arm64 architecture (updated action)
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: . # Build context is the current directory
          platforms: linux/arm64 # Target platform for the build
          push: ${{ github.event_name != 'pull_request' }} # Only push if not a pull request
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata action
          cache-from: type=gha # Enable caching from GitHub Actions cache
          cache-to: type=gha,mode=max # Enable caching to GitHub Actions cache in max mode
          # Optional: pin your Jetson's L4T version
          build-args: | # Pass build arguments to the Dockerfile
            L4T_TAG=r36.3.0